import java.time.*
import java.time.format.DateTimeFormatter

pipeline {
    agent any

    environment {
        REPOSITORY_URI = "backend-lista-compras"
    }

    stages {
        stage('Construir Tag') {
            steps {
                script {
                    // Obtener fecha actual con formato yyMMdd.HHmm
                    def now = new Date()
                    def dateNow = now.format("yyMMdd.HHmm", TimeZone.getTimeZone('UTC'))

                    // Generar tag de versi√≥n con fecha y n√∫mero de build
                    def dockerTag = "${dateNow}.${BUILD_NUMBER}"
                    def repositoryUriApp = "${REPOSITORY_URI}:${dockerTag}"

                    // Guardar en variables de entorno temporales
                    env.DATE_NOW = dateNow
                    env.DOCKER_TAG = dockerTag
                    env.REPOSITORY_URI_APP = repositoryUriApp

                    echo "üïí Fecha actual: ${DATE_NOW}"
                    echo "üè∑Ô∏è  Tag generado: ${REPOSITORY_URI_APP}"
                }
            }
        }

        stage('Desplegar con Docker Compose') {
            steps {
                script {
                    echo "üöÄ Iniciando despliegue con docker-compose..."

                    // Asegura que Jenkins pueda usar Docker en la misma red
                    sh """
                        CONTAINER_IMAGE=${REPOSITORY_URI_APP} \
                        docker compose -f ./backend_lista_compras/docker-compose.yml up -d --build
                    """

                    // Limpieza de im√°genes antiguas para ahorrar espacio
                    sh "docker image prune -f"

                    echo "‚úÖ Despliegue completado correctamente."
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline completado exitosamente: ${REPOSITORY_URI_APP}"
            sh "docker ps"
        }
        failure {
            echo "‚ùå Error durante la ejecuci√≥n del pipeline. Verificar logs."
        }
    }
}
